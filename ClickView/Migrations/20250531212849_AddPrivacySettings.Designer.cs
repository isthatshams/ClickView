// <auto-generated />
using System;
using ClickView.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ClickView.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250531212849_AddPrivacySettings")]
    partial class AddPrivacySettings
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("ClickView.Models.AnswerAnalysis", b =>
                {
                    b.Property<int>("AnswerAnalysisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AnswerAnalysisId"));

                    b.Property<string>("PersonalityTraits")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SoftSkills")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Tone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("UserAnswerId")
                        .HasColumnType("int");

                    b.HasKey("AnswerAnalysisId");

                    b.HasIndex("UserAnswerId")
                        .IsUnique();

                    b.ToTable("AnswerAnalyses");
                });

            modelBuilder.Entity("ClickView.Models.CV", b =>
                {
                    b.Property<int>("CvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CvId"));

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ExtractedText")
                        .HasColumnType("longtext");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("JobTitle")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CvId");

                    b.HasIndex("UserId");

                    b.ToTable("CVs");
                });

            modelBuilder.Entity("ClickView.Models.CareerReport", b =>
                {
                    b.Property<int>("CareerReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CareerReportId"));

                    b.Property<int>("InterviewId")
                        .HasColumnType("int");

                    b.Property<string>("JobSuggestionsJson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SkillsJson")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Strengths")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Weaknesses")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CareerReportId");

                    b.HasIndex("InterviewId");

                    b.ToTable("CareerReports");
                });

            modelBuilder.Entity("ClickView.Models.CvEnhancement", b =>
                {
                    b.Property<int>("CvEnhancementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CvEnhancementId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CvId")
                        .HasColumnType("int");

                    b.Property<string>("EnhancedCvText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Suggestions")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("CvEnhancementId");

                    b.HasIndex("CvId");

                    b.ToTable("CvEnhancements");
                });

            modelBuilder.Entity("ClickView.Models.CvInsights", b =>
                {
                    b.Property<int>("CvInsightsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CvInsightsId"));

                    b.Property<string>("Certifications")
                        .HasColumnType("longtext");

                    b.Property<int>("CvId")
                        .HasColumnType("int");

                    b.Property<string>("ExperienceSummary")
                        .HasColumnType("longtext");

                    b.Property<string>("SoftSkills")
                        .HasColumnType("longtext");

                    b.Property<string>("TechnicalSkills")
                        .HasColumnType("longtext");

                    b.Property<string>("ToolsAndTechnologies")
                        .HasColumnType("longtext");

                    b.HasKey("CvInsightsId");

                    b.HasIndex("CvId")
                        .IsUnique();

                    b.ToTable("CvInsights");
                });

            modelBuilder.Entity("ClickView.Models.FeedbackReport", b =>
                {
                    b.Property<int>("FeedbackReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("FeedbackReportId"));

                    b.Property<int>("InterviewId")
                        .HasColumnType("int");

                    b.Property<string>("PersonalitySummary")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Recommendation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Strengths")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Weaknesses")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("FeedbackReportId");

                    b.HasIndex("InterviewId");

                    b.ToTable("FeedbackReports");
                });

            modelBuilder.Entity("ClickView.Models.Interview", b =>
                {
                    b.Property<int>("InterviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("InterviewId"));

                    b.Property<int?>("CvId")
                        .HasColumnType("int");

                    b.Property<double>("InterviewMark")
                        .HasColumnType("double");

                    b.Property<int>("InterviewType")
                        .HasColumnType("int");

                    b.Property<int?>("OriginalInterviewId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("InterviewId");

                    b.HasIndex("CvId");

                    b.HasIndex("UserId");

                    b.ToTable("Interviews");
                });

            modelBuilder.Entity("ClickView.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("int");

                    b.Property<int>("InterviewId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentQuestionId")
                        .HasColumnType("int");

                    b.Property<double>("QuestionMark")
                        .HasColumnType("double");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("QuestionId");

                    b.HasIndex("InterviewId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("ClickView.Models.RecommendedCourse", b =>
                {
                    b.Property<int>("RecommendedCourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("RecommendedCourseId"));

                    b.Property<int>("CareerReportId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("RecommendedCourseId");

                    b.HasIndex("CareerReportId");

                    b.ToTable("RecommendedCourses");
                });

            modelBuilder.Entity("ClickView.Models.ReferencedAnswer", b =>
                {
                    b.Property<int>("ReferencedAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ReferencedAnswerId"));

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("ReferencedAnswerText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ReferencedAnswerId");

                    b.HasIndex("QuestionId")
                        .IsUnique();

                    b.ToTable("ReferencedAnswers");
                });

            modelBuilder.Entity("ClickView.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EmailVerificationCode")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LastVerificationEmailSentAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProfessionalTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("ShowActivity")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowProfile")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("ShowProgress")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("VerificationCodeExpiry")
                        .HasColumnType("datetime(6)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ClickView.Models.UserAnswer", b =>
                {
                    b.Property<int>("UserAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserAnswerId"));

                    b.Property<int?>("AnswerAnalysisId")
                        .HasColumnType("int");

                    b.Property<byte[]>("AudioData")
                        .HasColumnType("longblob");

                    b.Property<string>("EvaluationFeedback")
                        .HasColumnType("longtext");

                    b.Property<int?>("EvaluationScore")
                        .HasColumnType("int");

                    b.Property<int>("InterviewId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("TranscribedText")
                        .HasColumnType("longtext");

                    b.Property<string>("UserAnswerNotes")
                        .HasColumnType("longtext");

                    b.Property<string>("UserAnswerText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserAnswerId");

                    b.HasIndex("InterviewId");

                    b.HasIndex("QuestionId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("ClickView.Models.AnswerAnalysis", b =>
                {
                    b.HasOne("ClickView.Models.UserAnswer", "UserAnswer")
                        .WithOne("AnswerAnalysis")
                        .HasForeignKey("ClickView.Models.AnswerAnalysis", "UserAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAnswer");
                });

            modelBuilder.Entity("ClickView.Models.CV", b =>
                {
                    b.HasOne("ClickView.Models.User", "User")
                        .WithMany("CVs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClickView.Models.CareerReport", b =>
                {
                    b.HasOne("ClickView.Models.Interview", "Interview")
                        .WithMany()
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interview");
                });

            modelBuilder.Entity("ClickView.Models.CvEnhancement", b =>
                {
                    b.HasOne("ClickView.Models.CV", "CV")
                        .WithMany()
                        .HasForeignKey("CvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CV");
                });

            modelBuilder.Entity("ClickView.Models.CvInsights", b =>
                {
                    b.HasOne("ClickView.Models.CV", "Cv")
                        .WithOne("Insights")
                        .HasForeignKey("ClickView.Models.CvInsights", "CvId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cv");
                });

            modelBuilder.Entity("ClickView.Models.FeedbackReport", b =>
                {
                    b.HasOne("ClickView.Models.Interview", "Interview")
                        .WithMany()
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interview");
                });

            modelBuilder.Entity("ClickView.Models.Interview", b =>
                {
                    b.HasOne("ClickView.Models.CV", "CV")
                        .WithMany("Interviews")
                        .HasForeignKey("CvId");

                    b.HasOne("ClickView.Models.User", "User")
                        .WithMany("Interviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CV");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ClickView.Models.Question", b =>
                {
                    b.HasOne("ClickView.Models.Interview", "Interview")
                        .WithMany("Questions")
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interview");
                });

            modelBuilder.Entity("ClickView.Models.RecommendedCourse", b =>
                {
                    b.HasOne("ClickView.Models.CareerReport", "CareerReport")
                        .WithMany("RecommendedCourses")
                        .HasForeignKey("CareerReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CareerReport");
                });

            modelBuilder.Entity("ClickView.Models.ReferencedAnswer", b =>
                {
                    b.HasOne("ClickView.Models.Question", "Question")
                        .WithOne("ReferencedAnswer")
                        .HasForeignKey("ClickView.Models.ReferencedAnswer", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ClickView.Models.UserAnswer", b =>
                {
                    b.HasOne("ClickView.Models.Interview", "Interview")
                        .WithMany("UserAnswers")
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClickView.Models.Question", "Question")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interview");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ClickView.Models.CV", b =>
                {
                    b.Navigation("Insights");

                    b.Navigation("Interviews");
                });

            modelBuilder.Entity("ClickView.Models.CareerReport", b =>
                {
                    b.Navigation("RecommendedCourses");
                });

            modelBuilder.Entity("ClickView.Models.Interview", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("ClickView.Models.Question", b =>
                {
                    b.Navigation("ReferencedAnswer")
                        .IsRequired();

                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("ClickView.Models.User", b =>
                {
                    b.Navigation("CVs");

                    b.Navigation("Interviews");
                });

            modelBuilder.Entity("ClickView.Models.UserAnswer", b =>
                {
                    b.Navigation("AnswerAnalysis")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
